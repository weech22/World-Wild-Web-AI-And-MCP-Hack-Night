"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  ngrok: () => ngrok
});
module.exports = __toCommonJS(index_exports);
var import_picocolors = __toESM(require("picocolors"), 1);
var import_ngrok = __toESM(require("@ngrok/ngrok"), 1);
var ngrok = (options) => ({
  name: "ngrok",
  configureServer({ config, httpServer }) {
    let listener;
    httpServer?.on("listening", async () => {
      const address = httpServer.address();
      if (listener || !address || typeof address === "string") return;
      listener = await import_ngrok.default.forward({
        addr: address.port,
        ...typeof options === "string" ? { authtoken: options } : !options ? { authtoken_from_env: true } : options
      });
      const url = listener.url();
      if (!url) return;
      if (Array.isArray(config.server.allowedHosts)) {
        config.server.allowedHosts.push(new URL(url).hostname);
      }
      config.logger.info(import_picocolors.default.magenta("  \u279C") + import_picocolors.default.magenta("  ngrok:   ") + import_picocolors.default.cyan(url));
    });
    httpServer?.on("close", async () => listener?.close());
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ngrok
});
